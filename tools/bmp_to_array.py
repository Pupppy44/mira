import numpy as np
from PIL import Image

from PIL import Image
import numpy as np

# Define the palette as an array of RGB tuples
palette = [
    (0x00, 0x00, 0x00), (0x00, 0x00, 0xAA), (0x00, 0xAA, 0x00), (0x00, 0xAA, 0xAA),
    (0xAA, 0x00, 0x00), (0xAA, 0x00, 0xAA), (0xAA, 0x55, 0x00), (0xAA, 0xAA, 0xAA),
    (0x55, 0x55, 0x55), (0x55, 0x55, 0xFF), (0x55, 0xFF, 0x55), (0x55, 0xFF, 0xFF),
    (0xFF, 0x55, 0x55), (0xFF, 0x55, 0xFF), (0xFF, 0xFF, 0x55), (0xFF, 0xFF, 0xFF),
    (0x00, 0x00, 0x00), (0x10, 0x10, 0x10), (0x20, 0x20, 0x20), (0x35, 0x35, 0x35),
    (0x45, 0x45, 0x45), (0x55, 0x55, 0x55), (0x65, 0x65, 0x65), (0x75, 0x75, 0x75),
    (0x8A, 0x8A, 0x8A), (0x9A, 0x9A, 0x9A), (0xAA, 0xAA, 0xAA), (0xBA, 0xBA, 0xBA),
    (0xCA, 0xCA, 0xCA), (0xDF, 0xDF, 0xDF), (0xEF, 0xEF, 0xEF), (0xFF, 0xFF, 0xFF),
    (0x00, 0x00, 0xFF), (0x41, 0x00, 0xFF), (0x82, 0x00, 0xFF), (0xBE, 0x00, 0xFF),
    (0xFF, 0x00, 0xFF), (0xFF, 0x00, 0xBE), (0xFF, 0x00, 0x82), (0xFF, 0x00, 0x41),
    (0xFF, 0x00, 0x00), (0xFF, 0x41, 0x00), (0xFF, 0x82, 0x00), (0xFF, 0xBE, 0x00),
    (0xFF, 0xFF, 0x00), (0xBE, 0xFF, 0x00), (0x82, 0xFF, 0x00), (0x41, 0xFF, 0x00),
    (0x00, 0xFF, 0x00), (0x00, 0xFF, 0x41), (0x00, 0xFF, 0x82), (0x00, 0xFF, 0xBE),
    (0x00, 0xFF, 0xFF), (0x00, 0xBE, 0xFF), (0x00, 0x82, 0xFF), (0x00, 0x41, 0xFF),
    (0x82, 0x82, 0xFF), (0x9E, 0x82, 0xFF), (0xBE, 0x82, 0xFF), (0xDF, 0x82, 0xFF),
    (0xFF, 0x82, 0xFF), (0xFF, 0x82, 0xDF), (0xFF, 0x82, 0xBE), (0xFF, 0x82, 0x9E),
    (0xFF, 0x82, 0x82), (0xFF, 0x9E, 0x82), (0xFF, 0xBE, 0x82), (0xFF, 0xDF, 0x82),
    (0xFF, 0xFF, 0x82), (0xDF, 0xFF, 0x82), (0xBE, 0xFF, 0x82), (0x9E, 0xFF, 0x82),
    (0x82, 0xFF, 0x82), (0x82, 0xFF, 0x9E), (0x82, 0xFF, 0xBE), (0x82, 0xFF, 0xDF),
    (0x82, 0xFF, 0xFF), (0x82, 0xDF, 0xFF), (0x82, 0xBE, 0xFF), (0x82, 0x9E, 0xFF),
    (0xBA, 0xBA, 0xFF), (0xCA, 0xBA, 0xFF), (0xDF, 0xBA, 0xFF), (0xEF, 0xBA, 0xFF),
    (0xFF, 0xBA, 0xFF), (0xFF, 0xBA, 0xEF), (0xFF, 0xBA, 0xDF), (0xFF, 0xBA, 0xCA),
    (0xFF, 0xBA, 0xBA), (0xFF, 0xCA, 0xBA), (0xFF, 0xDF, 0xBA), (0xFF, 0xEF, 0xBA),
    (0xFF, 0xFF, 0xBA), (0xEF, 0xFF, 0xBA), (0xDF, 0xFF, 0xBA), (0xCA, 0xFF, 0xBA),
    (0xBA, 0xFF, 0xBA), (0xBA, 0xFF, 0xCA), (0xBA, 0xFF, 0xDF), (0xBA, 0xFF, 0xEF),
    (0xBA, 0xFF, 0xFF), (0xBA, 0xEF, 0xFF), (0xBA, 0xDF, 0xFF), (0xBA, 0xCA, 0xFF),
    (0x00, 0x00, 0x71), (0x1C, 0x00, 0x71), (0x39, 0x00, 0x71), (0x55, 0x00, 0x71),
    (0x71, 0x00, 0x71), (0x71, 0x00, 0x55), (0x71, 0x00, 0x39), (0x71, 0x00, 0x1C),
    (0x71, 0x00, 0x00), (0x71, 0x1C, 0x00), (0x71, 0x39, 0x00), (0x71, 0x55, 0x00),
    (0x71, 0x71, 0x00), (0x55, 0x71, 0x00), (0x39, 0x71, 0x00), (0x1C, 0x71, 0x00),
    (0x00, 0x71, 0x00), (0x00, 0x71, 0x1C), (0x00, 0x71, 0x39), (0x00, 0x71, 0x55),
    (0x00, 0x71, 0x71), (0x00, 0x55, 0x71), (0x00, 0x39, 0x71), (0x00, 0x1C, 0x71),
    (0x39, 0x39, 0x71), (0x45, 0x39, 0x71), (0x55, 0x39, 0x71), (0x61, 0x39, 0x71),
    (0x71, 0x39, 0x71), (0x71, 0x39, 0x61), (0x71, 0x39, 0x55), (0x71, 0x39, 0x45),
    (0x71, 0x39, 0x39), (0x71, 0x45, 0x39), (0x71, 0x55, 0x39), (0x71, 0x61, 0x39),
    (0x71, 0x71, 0x39), (0x61, 0x71, 0x39), (0x55, 0x71, 0x39), (0x45, 0x71, 0x39),
    (0x39, 0x71, 0x39), (0x39, 0x71, 0x45), (0x39, 0x71, 0x55), (0x39, 0x71, 0x61),
    (0x39, 0x71, 0x71), (0x39, 0x61, 0x71), (0x39, 0x55, 0x71), (0x39, 0x45, 0x71),
    (0x51, 0x51, 0x71), (0x59, 0x51, 0x71), (0x61, 0x51, 0x71), (0x69, 0x51, 0x71),
    (0x71, 0x51, 0x71), (0x71, 0x51, 0x69), (0x71, 0x51, 0x61), (0x71, 0x51, 0x59),
    (0x71, 0x51, 0x51), (0x71, 0x59, 0x51), (0x71, 0x61, 0x51), (0x71, 0x69, 0x51),
    (0x71, 0x71, 0x51), (0x69, 0x71, 0x51), (0x61, 0x71, 0x51), (0x59, 0x71, 0x51),
    (0x51, 0x71, 0x51), (0x51, 0x71, 0x59), (0x51, 0x71, 0x61), (0x51, 0x71, 0x69),
    (0x51, 0x71, 0x71), (0x51, 0x69, 0x71), (0x51, 0x61, 0x71), (0x51, 0x59, 0x71),
    (0x00, 0x00, 0x41), (0x10, 0x00, 0x41), (0x20, 0x00, 0x41), (0x31, 0x00, 0x41),
    (0x41, 0x00, 0x41), (0x41, 0x00, 0x31), (0x41, 0x00, 0x20), (0x41, 0x00, 0x10),
    (0x41, 0x00, 0x00), (0x41, 0x10, 0x00), (0x41, 0x20, 0x00), (0x41, 0x31, 0x00),
    (0x41, 0x41, 0x00), (0x31, 0x41, 0x00), (0x20, 0x41, 0x00), (0x10, 0x41, 0x00),
    (0x00, 0x41, 0x00), (0x00, 0x41, 0x10), (0x00, 0x41, 0x20), (0x00, 0x41, 0x31),
    (0x00, 0x41, 0x41), (0x00, 0x31, 0x41), (0x00, 0x20, 0x41), (0x00, 0x10, 0x41),
    (0x20, 0x20, 0x41), (0x28, 0x20, 0x41), (0x31, 0x20, 0x41), (0x39, 0x20, 0x41),
    (0x41, 0x20, 0x41), (0x41, 0x20, 0x39), (0x41, 0x20, 0x31), (0x41, 0x20, 0x28),
    (0x41, 0x20, 0x20), (0x41, 0x28, 0x20), (0x41, 0x31, 0x20), (0x41, 0x39, 0x20),
    (0x41, 0x41, 0x20), (0x39, 0x41, 0x20), (0x31, 0x41, 0x20), (0x28, 0x41, 0x20),
    (0x20, 0x41, 0x20), (0x20, 0x41, 0x28), (0x20, 0x41, 0x31), (0x20, 0x41, 0x39),
    (0x20, 0x41, 0x41), (0x20, 0x39, 0x41), (0x20, 0x31, 0x41), (0x20, 0x28, 0x41),
    (0x2D, 0x2D, 0x41), (0x31, 0x2D, 0x41), (0x35, 0x2D, 0x41), (0x3D, 0x2D, 0x41),
    (0x41, 0x2D, 0x41), (0x41, 0x2D, 0x3D), (0x41, 0x2D, 0x35), (0x41, 0x2D, 0x31),
    (0x41, 0x2D, 0x2D), (0x41, 0x31, 0x2D), (0x41, 0x35, 0x2D), (0x41, 0x3D, 0x2D),
    (0x41, 0x41, 0x2D), (0x3D, 0x41, 0x2D), (0x35, 0x41, 0x2D), (0x31, 0x41, 0x2D),
    (0x2D, 0x41, 0x2D), (0x2D, 0x41, 0x31), (0x2D, 0x41, 0x35), (0x2D, 0x41, 0x3D),
    (0x2D, 0x41, 0x41), (0x2D, 0x3D, 0x41), (0x2D, 0x35, 0x41), (0x2D, 0x31, 0x41),
    (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00),
    (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00), (0x00, 0x00, 0x00)
]

def find_matching_palette_color(pixel):
    r, g, b = pixel
    for i, (pr, pg, pb) in enumerate(palette):
        if r == pr and g == pg and b == pb:
            return i
    return find_closest_palette_color(pixel)

def find_closest_palette_color(pixel):
    r, g, b = pixel
    min_dist = float('inf')
    closest_index = 0
    for i, (pr, pg, pb) in enumerate(palette):
        dist = (r - pr) ** 2 + (g - pg) ** 2 + (b - pb) ** 2
        if dist < min_dist:
            min_dist = dist
            closest_index = i
    return closest_index

def bmp_to_c_array(image_path):
    img = Image.open(image_path).convert('RGB', palette=Image.ADAPTIVE, colors=256)
    pixels = np.array(img)
    height, width, _ = pixels.shape
    c_array = []

    for y in range(height):
        row = []
        for x in range(width):
            pixel = pixels[y, x]
            index = find_matching_palette_color(pixel)
            row.append(index)
        c_array.append(row)

    return c_array

def print_c_array(c_array):
    print("uint8_t image_data[size] = {")
    for row in c_array:
        print("    " + ", ".join([str(x) for x in row]) + ",")
    print("};")

if __name__ == "__main__":
    image_path = 'mira.bmp'
    c_array = bmp_to_c_array(image_path)
    print_c_array(c_array)